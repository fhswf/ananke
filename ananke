#!/usr/bin/env python3

import argparse
import logging
import os
import subprocess

LOG_FORMAT = '%(asctime)s %(levelname)s: %(message)s'
LOG_FILE = 'ananke.log'

IMG_DEF_DIR = 'images'
IMG_PREFIX = 'ananke-'
DEFAULT_IMG_NAME = 'ananke-{base,nbgrader}'
BUILD_LOG = 'build.log'

CONT_DATA_DIR = 'containers'
CONT_DATA_IGNORE = 'template'

COLOR_RESET = '\x1b[0m'
COLOR_BOLD = '\x1b[1m'

BASE_PATH = os.path.abspath(os.path.dirname(__file__))

logger = logging.getLogger(__name__)


def shell(cmd):
    '''
    Run a shell command and return its output.

    Parameters
    ----------
    cmd : list[str]
        Command to execute. First item is command. Others are arguments.

    Returns
    -------
    list[str]
        List of lines returned on stdout.
    '''

    logger.info('Executing shell command "{}".'.format(' '.join(cmd)))
    result = subprocess.run(cmd, capture_output=True, text=True)
    logger.info('Shell command\'s output:\n' + result.stdout)

    return result.stdout.split('\n'), result.returncode


def get_img_defs():
    '''
    Return list of available image definitions.

    Returns
    -------
    list[str]
        List of subdirectory names containing image definitions.
    '''

    img_defs = []
    path = f'{BASE_PATH}/{IMG_DEF_DIR}'
    logger.info('Looking for image definitions in {path}...')
    for name in os.listdir(path):
        if name.startswith(IMG_PREFIX) and os.path.isdir(f'{path}/{name}'):
            img_defs.append(name)

    return img_defs


def get_imgs():
    '''
    Return list of available images.

    Returns
    -------
    list[(str, str, str)]
        List of (repo, name, tag) tuples for all images.
    '''

    imgs = []
    output, _ = shell('podman image ls'.split())
    for line in output[1:-1]:  # first line is header, last line is empty
        repo_and_name, tag, _ = line.split(maxsplit=2)
        repo, name = repo_and_name.rsplit('/', maxsplit=1)
        tag = tag if tag != '<none>' else ''
        if name.startswith(IMG_PREFIX):
            imgs.append((repo, name, tag))

    return imgs


def get_conts():
    '''
    Return list of available containers.

    Returns
    -------
    list[(str, str)]
        List of (container_name, image_name) tuples for all containers.
    '''

    conts = []
    output, _ = shell('podman ps -a'.split())
    for line in output[1:-1]:  # first line is header, last line is empty
        cont_name = line.rsplit(maxsplit=1)
        _, img, _ = line.split(maxsplit=2)
        _, img_name = img.rsplit('/', maxsplit=1)
        if img_name.startswith(IMG_PREFIX):
            conts.append((name, img))

    return conts


def subcmd_list(args):

    # list available image definitions
    img_defs = get_img_defs()
    print(f'{COLOR_BOLD}available image definitions:{COLOR_RESET}')
    for img_def in img_defs:
        print(f'  {img_def}')
    if len(img_defs) == 0:
        print('  none')

    # list available images
    imgs = get_imgs()
    print(f'{COLOR_BOLD}available/built images{COLOR_RESET} ("podman image ls" for details):')
    for repo, name, tag in imgs:
        if tag != '':
            print(f'  {repo}/{name}:{tag}')
        else:
            print(f'  {repo}/{name} (no tag)')
    if len(imgs) == 0:
        print('  none')

    # list containers
    conts = get_conts()
    print(f'{COLOR_BOLD}containers{COLOR_RESET} ("podman ps -a" for details):')
    for cont_name, img_name in conts:
        print(f'  {cont_name} (using image {img_name})')
    if len(conts) == 0:
        print('  none')


def subcmd_build(args):

    # check arguments
    name = args.name
    img_def = args.img_def.split('/')[-1]
    if name == DEFAULT_IMG_NAME:
        name = img_def
    if not name.startswith(IMG_PREFIX):
        print(f'Image name has to start with "{IMG_PREFIX}", but image name is "{name}". Aborting...')
        return

    # build image
    print(f'building Ananke image "{name}" from image definition "{img_def}" (this may take several minutes)...')
    output, code = shell(['podman', 'build', f'--tag={name}', f'{BASE_PATH}/{IMG_DEF_DIR}/{img_def}'])
    with open(f'{BASE_PATH}/{BUILD_LOG}', 'w') as f:
        f.write('\n'.join(output))
    if code == 0:
        print('...done')
    else:
        print(f'An ERROR occured. See file {BUILD_LOG} for details.')


def main():

    global logger

    # set up logging to log file
    path = f'{BASE_PATH}/{LOG_FILE}'
    try:
        handler = logging.FileHandler(path, mode='w')
        handler.setFormatter(logging.Formatter(LOG_FORMAT))
        logger.addHandler(handler)
    except Exception as e:
        print(f'ERROR: Creating log file failed ({e}). Aborting...')
    logger.setLevel(logging.INFO)
    logger.info('Logging initialized.')

    # intialize argument parser
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers(
        title='subcommands',
        description='build, list ("ananke SUBCOMMAND -h" for details)'
    )

    # subparser for build command
    parser_build = subparsers.add_parser(
        'build',
        help='build an image'
    )
    parser_build.add_argument(
        '-n', '--name',
        default=DEFAULT_IMG_NAME,
        help='name of built image'
    )
    parser_build.add_argument(
        'img_def',
        metavar='IMAGE_DEFINITION',
        help='name of image definition to use ("ananke list" yields available image definitions)'
    )
    parser_build.set_defaults(func=subcmd_build)

    # subparser for list command
    parser_list = subparsers.add_parser(
        'list',
        help='list images and containers'
    )
    parser_list.set_defaults(func=subcmd_list)

    # execute command
    args = parser.parse_args()
    if 'func' in args:
        args.func(args)
    else:
        parser.print_usage()


if __name__ == '__main__':
    main()
