#!/bin/bash

# Constants and Configuration
# ---------------------------

source config.sh


# ANSI color codes
# ----------------
RESET='\033[0m'
RED='\033[1m\033[31m'


# Functions
# ---------

# Function to check if the container is running.
check_container_running() {
  if podman inspect --format "{{.State.Running}}" "$CONTAINER_NAME" 2>/dev/null | grep -q "true"; then
    return 0  # Container is running
  else
    return 1  # Container is not running
  fi
}

# Function to start the container.
start_container() {
  echo "Starting the container '$CONTAINER_NAME'..."
  if podman start "$CONTAINER_NAME"; then
    echo "Container '$CONTAINER_NAME' started successfully."
  else
    echo "Failed to start container '$CONTAINER_NAME'."
    exit 1
  fi
}


# Main Script Logic
# -----------------

# Notify the user about the deletion process.
echo "You are about to delete the container with name: $CONTAINER_NAME"

# Verify that the container should really be deleted.
echo -n "Are you sure you want to proceed with the deletion? (y/yes or n/no) [default: no]: "
read -r confirm
confirm=${confirm:-no}

# Check the user's confirmation.
while true; do
  case "$confirm" in
    [Yy]|[Yy][Ee][Ss])
      echo "Continuing with deletion process."
      echo "This process will involve multiple questions to determine how the deletion should be executed."
      echo ""
      break
      ;;
    [Nn]|[Nn][Oo])
      echo "Deletion aborted. No changes were made. Exiting script."
      exit 0
      ;;
    *)
      echo "Invalid response. Please enter 'yes' or 'no'."
      ;;
  esac
done

# Check how the data inside the container shall be handled.
echo "Various files will have accumulated over the lifetime of the container. The focus of this script is on the home directories of students, lecturers and grader users, the Exchange directory of nbgrader as well as LTI related files (autogenerated_services.py, instructors.json, lti_USERNAME.json)."
echo -e "${RED}You are responsible for backing up all other files and directories yourself before proceeding with the deletion.${RESET}"

# Check if the user made backed up all necessary files/directories.
echo -n "Have you backed up all the necessary files and directories? (y/yes or n/no) [default: no]: "
read -r confirm
confirm=${confirm:-no}

while true; do
  case "$confirm" in
    [Yy]|[Yy][Ee][Ss])
      break
      ;;
    [Nn]|[Nn][Oo])
      echo "Deletion aborted. No changes were made. Exiting script."
      exit 0
      ;;
    *)
      echo "Invalid response. Please enter 'yes' or 'no'."
      ;;
  esac
done

# Check if the container is running. Otherwise output a prompt for confirmation that the container needs to be started.
if check_container_running; then
  echo "Container '$CONTAINER_NAME' is already running. Proceeding ..."
else
  echo -e "The container '$CONTAINER_NAME' needs to be running. ${RED}This will open the connection/port and the container will be accessible until the deletion finished.${RESET}"
  read -r -p "Do you want to start it now? (y/yes or n/no) [default: no]: " confirm
  confirm=${confirm:-no}

  while true; do
    case "$confirm" in
      [Yy]|[Yy][Ee][Ss])
        start_container
        break
        ;;
      [Nn]|[Nn][Oo])
        echo "Container '$CONTAINER_NAME' will not be started."
        exit 0
        ;;
      *)
        echo "Invalid input. Please enter 'yes' or 'no'."
        ;;
    esac
  done
fi

# Stopping service.
echo "Stopping and removing service."
service_name="container-$CONTAINER_NAME"
if systemctl --user list-units | grep -q "$service_name"; then
  systemctl --user stop "$service_name"
  systemctl --user disable "$service_name"
fi


# Cleanup and Exit
# ----------------

rm ~/.config/systemd/user/container-"$CONTAINER_NAME".service

podman rm "$CONTAINER_NAME"
echo "Deletion of container finished successfully!"
