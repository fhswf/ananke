import fcntl
import logging
import re
import os
import hashlib


def course_id_to_grader_user(course_id):
    
    return course_id[0:32]
    #h = hashlib.shake_256(course_id.encode())
    #return ('c-' + h.hexdigest(4) + '-' + '-'.join(course_id.split('-')[3:]))[:32]    # Debian usernames are limited to 32 characters


def make_course_id(lti_state):
    ''' Make course ID, course title, grader username from LTI data.'''
    
    deployment_id = lti_state.get('https://purl.imsglobal.org/spec/lti/claim/deployment_id', '0')
    resource_link_id = lti_state.get('https://purl.imsglobal.org/spec/lti/claim/resource_link').get('id')
    resource_link_title = lti_state.get('https://purl.imsglobal.org/spec/lti/claim/resource_link').get('title')
    context_title = lti_state.get('https://purl.imsglobal.org/spec/lti/claim/context', {}).get('title')

    h = hashlib.shake_256(f'{deployment_id}-{resource_link_id}'.encode())
    course_id = 'c-' + h.hexdigest(8)
    grader_user = course_id_to_grader_user(course_id)

    if resource_link_title and context_title:
        course_title = f'{context_title} - {resource_link_title}'
    elif resource_link_title:
        course_title = resource_link_title
    elif context_title:
        course_title = context_title
    else:
        course_title = 'No title available'
    course_title = f'{course_title} ({course_id})'.replace('\'', '')
    
    return course_id, course_title, grader_user


def read_autogenerated_config():

    # read Python code from config file
    logging.debug('reading autogenerated service configuration')
    autogenerated_file = '/opt/kore/runtime/autogenerated_services.py'
    try:
        with open(autogenerated_file) as f:
            config_code = f.read()
    except:
        logging.debug('no autogenerated service configuration found, creating new one')
        config_code = ''

    # modify Python code
    config_code = config_code.replace('c = get_config()', '')
    config_code = config_code.replace('c.JupyterHub.services', 'services')
    config_code = config_code.replace('c.JupyterHub.load_roles', 'roles')
    config_code = config_code.replace('c.JupyterHub.load_groups', 'groups')

    # execute Python code
    services = []
    roles = []
    groups = {}
    exec(config_code)

    return services, roles, groups


def write_autogenerated_config(services, roles, groups):

    logging.debug('writing autogenerated service configuration')
    autogenerated_file = '/opt/kore/runtime/autogenerated_services.py'
    
    config_code = '# autogenerated nbgrader course configuration (DO NOT MODIFY)\n\n'
    config_code += 'c = get_config()\n\n'
    
    for service in services:
        config_code += 'c.JupyterHub.services.append(' + str(service) + ')\n'
        
    for role in roles:
        config_code += 'c.JupyterHub.load_roles.append(' + str(role) + ')\n'
        
    config_code += 'c.JupyterHub.load_groups.update(' + str(groups) + ')\n'
    
    with open(autogenerated_file, 'w') as f:
        fcntl.flock(f, fcntl.LOCK_EX)
        f.write(config_code)
        fcntl.flock(f, fcntl.LOCK_UN)
    os.system(f'chmod 600 {autogenerated_file}')


def get_hub_base_url(lti_state):
    
    base_url = lti_state['https://purl.imsglobal.org/spec/lti/claim/target_link_uri']
    base_url = '/'.join(base_url.strip('/').split('://')[-1].split('/')[1:]) + '/'
    logging.debug('hub base URL from LTI data: ' + base_url)
    if base_url == '/':
        base_url = ''

    return base_url
