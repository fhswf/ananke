import json
import logging
from typing import Optional, Dict, Any

from flask import Flask, current_app


class KoreConfigLoader:
    error_messages = {
        # Defining type and message for errors that may occur while reading the Kore configuration file.
        FileNotFoundError: 'General configuration file could not be found. Contact administrator or see logs for more details.',
        PermissionError: 'General configuration file could not be read. Contact administrator or see logs for more details.',
        OSError: 'General configuration file could not be opened. Contact administrator or see logs for more details.',
        json.JSONDecodeError: 'General configuration file could not be decoded. Contact administrator or see logs for more details.',
    }

    def __init__(self, kore_config_file_path: str) -> None:
        self.kore_config_file_path = kore_config_file_path
        self.instructors_database_path: str = '/opt/kore/runtime/instructors.json'
        self.nbgrader_config_path: str = '/opt/conda/envs/jhub/etc/jupyter/nbgrader_config.py'
        self.date_time_format: str = '%d-%m-%yT%H:%M:%S'
        self.autogenerated_file_path: str = '/opt/kore/runtime/autogenerated_services.py'

    @classmethod
    def get_error_messages(cls) -> dict:
        return cls.error_messages

    def load_config(self) -> None:
        """
        Load and parse the general configuration file.
        """

        logging.info('The general configuration file path is hard coded in the ConfigLoader class! Please revise the code as seen fit.')

        try:
            config = json.load(open(file=self.kore_config_file_path, mode='r', encoding='utf-8'))

            self.instructors_database_path = config['instructors_database_path']
            self.nbgrader_config_path = config['nbgrader_config_path']
            self.date_time_format = config['date_time_format']
            self.autogenerated_file_path = config['autogenerated_file_path']

        except tuple(self.error_messages.keys()):
            logging.error('Error while reading or parsing the Kore configuration file. Default values will be used.')


class FlaskConfigLoader(KoreConfigLoader):
    error_messages = {
        **KoreConfigLoader.error_messages,

        # Defining type and message for errors that may occur on running exec().
        SyntaxError: 'Content of LTI configuration has a SyntaxError. Contact administrator or see logs for more details.',
        TypeError: 'Content of LTI configuration has a TypeError. Contact administrator or see logs for more details.',
        MemoryError: 'Content of LTI configuration could not be processed due to a MemoryError. Contact administrator or see logs for more details.',
        RecursionError: 'Content of LTI configuration raised a RecursionError. Contact administrator or see logs for more details.'
    }

    def __init__(self, kore_config_file_path: str, lti_config_file_path: str, app: Flask) -> None:
        super().__init__(kore_config_file_path)
        self.lti_config_file_path = lti_config_file_path
        self.app = app
        self.preflight_error: Optional[str] = None
        self.lti_config: Optional[Dict[str, Any]] = None

    def load_config(self) -> None:
        """
        Extend load_config() of base class to load and parse the lti configuration file.
        """
        try:
            super().load_config()

        except tuple(self.error_messages.keys()) as e:
            error_message = self.error_messages.get(type(e), 'An unknown error occurred while loading the Kore configuration file.')
            self.preflight_error = f"{error_message}\n{e}" if getattr(self, 'preflight_error', None) else error_message

        try:
            _lti_config = {}
            with open(file='/opt/conda/envs/jhub/etc/jupyterhub/jupyterhub_config.d/30_lms.py') as _lms_config_file:
                _config_code = _lms_config_file.read()

            _config_code = _config_code.replace('c = get_config()', '')
            _config_code = _config_code.replace('c.LTI13Authenticator.', '')

            exec(_config_code, globals(), _lti_config)
            self.lti_config = _lti_config

            logging.info('LTI config for Kore: ' + str(self.lti_config))

        except tuple(self.error_messages.keys()) as e:
            error_message = self.error_messages.get(type(e), 'An unknown error occurred while loading the LTI configuration file.')
            self.preflight_error = f"{error_message}\n{e}" if getattr(self, 'preflight_error', None) else error_message

    def store_parameter(self, key: str, value: Any) -> None:
        """
        Store a parameter within the Flask app's configuration.
        """
        self.app.config[key] = value

    def store_in_app_context(self) -> None:
        """
        Store the ConfigLoader instance in the Flask app context.
        """
        with self.app.app_context():
            current_app.config['CONFIG_LOADER'] = self
