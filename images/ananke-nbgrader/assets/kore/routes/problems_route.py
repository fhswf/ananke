import json
import logging
import os
import time
from subprocess import run, CalledProcessError

from flask import Blueprint, Response, current_app
from flask import request as flask_request

from misc.utils import get_list
from models.enums import Content
from models.lti_file_reader import LTIFileReader

problems_bp = Blueprint('problems', __name__)


@problems_bp.route('/problems', methods=['GET', 'POST'])
def problems():
    config_loader = current_app.config['CONFIG_LOADER']

    autogenerated_file_path = config_loader.autogenerated_file_path
    date_time_format = config_loader.date_time_format

    # Retrieve full problem list (active and backed up ones).
    if flask_request.method == 'GET':
        try:
            return get_list(autogenerated_file_path=autogenerated_file_path, content=Content.PROBLEMS)
        except ValueError:
            return Response(response=json.dumps({'message': 'ValueError'}), status=500)





    if flask_request.method == 'POST':
        try:
            user_name, path = flask_request.json['user'], flask_request.json['path'].removesuffix('/')
            logging.debug(f'User: {user_name}')
            logging.debug(f'Path of problem to be copied: {path}')
        except KeyError:
            logging.error('Request key is not in form!')
            return Response(response=json.dumps({'message': 'KeyError'}), status=500)

        logging.info(f'User {user_name} is copying problem from {path}.')

        # Read and parse JSON file containing LTI data of current user.
        lti_file_reader: LTIFileReader = LTIFileReader(user_name=user_name, file_path=f'runtime/lti_{user_name}.json')
        lti_file_reader.read_file()
        lti_file_reader.extract_values()

        if lti_file_reader.read_success and lti_file_reader.parse_success:
            course_id, course_title, grader_user = lti_file_reader.course_id, lti_file_reader.course_title, lti_file_reader.grader_user
        else:
            return lti_file_reader.error_response

        # Get name of problem to be copied.
        problem_name = path.split('/')[-1].removesuffix('.ipynb')
        logging.debug(f'Problem name: {problem_name}')

        # Check if the folder for imported problems exists.
        if not os.path.isdir(f'/home/{grader_user}/course_data/source/imported_problems/'):
            try:
                run(['mkdir', '-p', f'/home/{grader_user}/course_data/source/imported_problems/'], check=True)
                run(['chown', f'{grader_user}:{grader_user}', f'/home/{grader_user}/course_data/source/imported_problems/'], check=True)
            except CalledProcessError:
                logging.error('Command cannot be executed!')
                return Response(response=json.dumps({'message': 'CalledProcessError'}), status=500)

        # Copy problem with timestamp and change ownership.
        actual_time = time.strftime(date_time_format)
        dst = f'/home/{grader_user}/course_data/source/imported_problems/{problem_name} ({actual_time}).ipynb'

        try:
            run(['cp', f'{path}', dst], check=True)
            run(['chown', f'{grader_user}:{grader_user}', dst], check=True)
        except CalledProcessError:
            logging.error('Command cannot be executed!')
            return Response(response=json.dumps({'message': 'CalledProcessError'}), status=500)

        return Response(response=json.dumps({'message': 'Selected problem copied successfully! \n'
                                                        'Please refresh the webpage (Formgrader) to see the imported problem.'}), status=200)
